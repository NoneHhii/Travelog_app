import React, { useState } from "react";
import {
  Alert,
  Image,
  StyleSheet,
  TouchableOpacity,
  View,
  SafeAreaView, // Th√™m
  Text,         // D√πng Text c·ªßa RN
  ActivityIndicator,
  ScrollView,   // Th√™m
} from "react-native";
import { colors } from "../constants/colors";
import { Booking, Guest, InforProps } from "./BookingInfor"; // Gi·∫£ s·ª≠ types ·ªü ƒë√¢y
import { NativeStackScreenProps } from "@react-navigation/native-stack";
import createAcronym from "../utils/acronym";
import { ButtonComponent } from "../components/ButtonComponent";
import { createBooking } from "../api/apiClient";
import { Ionicons } from "@expo/vector-icons"; // Th√™m
import { RootStackParamList } from "../navigation/RootNavigator";

export interface PaymentType {
  infor: InforProps;
  guests: Guest[];
  contact: { // Th√™m contact n·∫øu c·∫ßn g·ª≠i mail
      email: string;
      name: string;
      phone: string;
  };
}

type StackProps = NativeStackScreenProps<RootStackParamList, "Payment">;

// --- Component Con: Header ---
interface PaymentHeaderProps {
  onBackPress: () => void;
}
const PaymentHeader: React.FC<PaymentHeaderProps> = ({ onBackPress }) => (
  <View style={styles.headerContainer}>
    <TouchableOpacity onPress={onBackPress} style={styles.headerButton}>
      <Ionicons name="arrow-back" size={24} color="#0A2C4D" />
    </TouchableOpacity>
    <Text style={styles.headerTitle}>X√°c nh·∫≠n & Thanh to√°n</Text>
    <View style={styles.headerButton} />
  </View>
);

// --- Component Con: Th·∫ª T√≥m T·∫Øt Thanh To√°n ---
const PaymentSummaryCard: React.FC<{ payment: PaymentType }> = ({ payment }) => (
  <View style={styles.card}>
    <Text style={styles.paymentDate}>{payment.infor.travelDate}</Text>
    <View style={styles.routeContainer}>
      <View style={styles.routePoint}>
        <Text style={styles.pointAcronym}>
          {createAcronym(payment.infor.departure)}
        </Text>
        <Text style={styles.pointName}>{payment.infor.departure}</Text>
      </View>
      <View style={styles.dashedLine} />
      <View style={styles.routePoint}>
        <Text style={styles.pointAcronym}>
          {createAcronym(payment.infor.destination)}
        </Text>
        <Text style={styles.pointName}>{payment.infor.destination}</Text>
      </View>
    </View>

    {/* Guest Info */}
    <View style={styles.guestInfoContainer}>
        <View style={styles.guestRow}>
            <Ionicons name="people-outline" size={16} color={colors.grey_text} />
            <Text style={styles.guestText}>{payment.infor.AdultNum} Ng∆∞·ªùi l·ªõn</Text>
        </View>
        {payment.infor.Child > 0 && (
            <View style={styles.guestRow}>
            <Ionicons name="person-outline" size={16} color={colors.grey_text} />
            <Text style={styles.guestText}>{payment.infor.Child} Tr·∫ª em</Text>
            </View>
        )}
    </View>

    {/* Separator */}
    <View style={styles.summaryDivider} />

    {/* Contact Info */}
    <View style={styles.contactRow}>
        <Text style={styles.summaryLabel}>Ng∆∞·ªùi ƒë·∫°i di·ªán:</Text>
        <Text style={styles.summaryValue}>{payment.contact.name || payment.guests[0].fullName}</Text>
    </View>
     <View style={styles.contactRow}>
        <Text style={styles.summaryLabel}>Email:</Text>
        <Text style={styles.summaryValue}>{payment.contact.email}</Text>
    </View>

    {/* Separator */}
    <View style={styles.summaryDivider} />

    {/* Total Price */}
    <Text style={styles.totalLabel}>T·ªïng ti·ªÅn c·∫ßn thanh to√°n</Text>
    <Text style={styles.totalPriceText}>
      {payment.infor.totalPrice.toLocaleString("vi-VN")} ‚Ç´
    </Text>
  </View>
);

// --- Component Con: Thanh Footer Thanh To√°n ---
interface PaymentBottomBarProps {
  onPay: () => void;
  loading: boolean;
}
const PaymentBottomBar: React.FC<PaymentBottomBarProps> = ({ onPay, loading }) => (
  <View style={styles.bottomBar}>
    <View style={styles.termsContainer}>
      <Text style={styles.termsTitle}>ƒêi·ªÅu kho·∫£n & ƒêi·ªÅu ki·ªán</Text>
      <Text style={styles.termsText}>
        B·∫±ng vi·ªác nh·∫•n THANH TO√ÅN b·∫°n ƒë√£ ƒë·ªìng √Ω v·ªõi c√°c{" "}
        <Text style={styles.linkText}>ƒëi·ªÅu kho·∫£n & ƒëi·ªÅu ki·ªán</Text> v√†{" "}
        <Text style={styles.linkText}>ch√≠nh s√°ch quy·ªÅn ri√™ng t∆∞</Text> c·ªßa Travelog.
      </Text>
    </View>
    <ButtonComponent
      type="button"
      text={loading ? "" : "THANH TO√ÅN"} // ·∫®n text khi loading
      onPress={onPay}
      width={"100%"}
      height={50}
      backgroundColor="#0194F3" // M√†u xanh
      borderRadius={15}
      disabled={loading} // Disable n√∫t khi loading
    >
      {/* Hi·ªÉn th·ªã ActivityIndicator khi loading */}
      {loading && <ActivityIndicator size="small" color={colors.white} />}
    </ButtonComponent>
  </View>
);


// --- Component Ch√≠nh: Payment ---
const Payment: React.FC<StackProps> = ({ navigation, route }) => {
  const { payment } = route.params;
  const [loading, setLoading] = useState(false);

  const postBooking = async (transactionId: string) => { // Nh·∫≠n transactionId
    try {
      const booking: Booking = {
        bookingDate: new Date().toISOString(), // D√πng ISOString cho chu·∫©n
        guestDetails: payment.guests,
        numberOfGuests: payment.guests.length,
        paymentInfo: {
          method: "Card", // Ho·∫∑c ph∆∞∆°ng th·ª©c thanh to√°n th·ª±c t·∫ø
          transactionID: transactionId, // L∆∞u ID giao d·ªãch
        },
        status: "confirmed", // Ho·∫∑c "pending" t√πy logic
        totalPrice: payment.infor.totalPrice,
        tourID: payment.infor.tourID,
        travelDate: payment.infor.travelDate,
        // Th√™m th√¥ng tin li√™n h·ªá n·∫øu c·∫ßn l∆∞u v√†o booking
        contactName: payment.contact.name,
        contactEmail: payment.contact.email,
        contactPhone: payment.contact.phone,
      };

      const newBookingId = await createBooking(booking);
      console.log("Booking created with ID:", newBookingId);
      return newBookingId; // Tr·∫£ v·ªÅ ID ƒë·ªÉ d√πng n·∫øu c·∫ßn

    } catch (error) {
      console.error("üî• L·ªói khi t·∫°o booking:", (error as Error).message);
      // Kh√¥ng c·∫ßn Alert ·ªü ƒë√¢y v√¨ ƒë√£ c√≥ Alert ·ªü handlePayment
      throw error; // N√©m l·ªói ƒë·ªÉ handlePayment bi·∫øt
    }
  };

  const handlePayment = async () => {
    setLoading(true);
    // const mockAmount = 1000; // C√≥ th·ªÉ kh√¥ng c·∫ßn n·ªØa
    const paymentEmail = payment.contact.email;
    const paymentAmount = payment.infor.totalPrice;

    console.log(`Ti·∫øn h√†nh thanh to√°n ${paymentAmount.toLocaleString('vi-VN')} VND...`);

    try {
      // 1. Gi·∫£ l·∫≠p g·ªçi API thanh to√°n (thay b·∫±ng API th·∫≠t)
      await new Promise<void>((resolve) => setTimeout(() => resolve(), 1500));
      const mockTransactionId = `TXN_${Date.now()}`; // T·∫°o ID giao d·ªãch gi·∫£
      console.log("Thanh to√°n th√†nh c√¥ng. Transaction ID:", mockTransactionId);

      // 2. T·∫°o booking tr√™n Firestore SAU KHI thanh to√°n th√†nh c√¥ng
      await postBooking(mockTransactionId);

      // 3. Gi·∫£ l·∫≠p g·ª≠i mail x√°c nh·∫≠n (thay b·∫±ng API th·∫≠t)
      console.log(`ƒêang g·ª≠i mail x√°c nh·∫≠n ƒë·∫øn: ${paymentEmail}`);
      await new Promise<void>((resolve) => setTimeout(() => resolve(), 1000));
      console.log("Mail x√°c nh·∫≠n ƒë√£ g·ª≠i.");

      // 4. Th√¥ng b√°o th√†nh c√¥ng v√† ƒëi·ªÅu h∆∞·ªõng
      Alert.alert(
        "Th√†nh c√¥ng!",
        `ƒê√£ thanh to√°n th√†nh c√¥ng ${paymentAmount.toLocaleString( "vi-VN" )} VND.\nEmail x√°c nh·∫≠n ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn ${paymentEmail}.`,
        [{ text: "OK", onPress: () => navigation.popToTop() }] // V·ªÅ m√†n h√¨nh Home
      );

    } catch (error) {
      console.error("L·ªói trong qu√° tr√¨nh thanh to√°n/t·∫°o booking/g·ª≠i mail:", error);
      Alert.alert(
        "Th·∫•t b·∫°i",
        "C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau."
      );
    } finally {
      setLoading(false); // Lu√¥n t·∫Øt loading d√π th√†nh c√¥ng hay th·∫•t b·∫°i
    }
  };

  return (
    <SafeAreaView style={styles.container}>
      <PaymentHeader onBackPress={() => navigation.goBack()} />
      <ScrollView style={styles.scrollView}>
        <PaymentSummaryCard payment={payment} />
        {/* Th√™m c√°c ph∆∞∆°ng th·ª©c thanh to√°n kh√°c ·ªü ƒë√¢y n·∫øu c·∫ßn */}
      </ScrollView>
      <PaymentBottomBar onPay={handlePayment} loading={loading} />
    </SafeAreaView>
  );
};

// --- StyleSheet ---
const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F4F7FF', // N·ªÅn xanh nh·∫°t
  },
  scrollView: {
    flex: 1,
    paddingTop: 20, // Th√™m kho·∫£ng c√°ch tr√™n
  },
  headerContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    width: '100%',
    backgroundColor: colors.white,
    paddingHorizontal: 15,
    paddingTop: 50,
    paddingBottom: 15,
    borderBottomColor: colors.light_Blue,
    borderBottomWidth: 1,
  },
  headerButton: {
    width: 40,
    alignItems: 'flex-start',
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#0A2C4D',
  },
  card: {
    marginHorizontal: 20,
    backgroundColor: colors.white,
    borderRadius: 16,
    padding: 15,
    elevation: 3,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 5,
    marginBottom: 20, // Th√™m kho·∫£ng c√°ch d∆∞·ªõi card
  },
  paymentDate: {
    color: colors.grey_text,
    fontSize: 15,
    fontWeight: '500',
    textAlign: 'center',
    marginBottom: 15,
  },
  routeContainer: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    justifyContent: 'space-between',
    marginBottom: 15,
  },
  routePoint: {
    alignItems: 'center',
    flex: 0.3,
  },
  pointAcronym: {
    color: '#0A2C4D', // M√†u ch·ªØ ƒë·∫≠m
    fontSize: 28,
    fontWeight: 'bold',
  },
  pointName: {
    color: '#333', // M√†u ch·ªØ th∆∞·ªùng
    fontSize: 13,
    marginTop: 4,
    textAlign: 'center',
  },
  dashedLine: {
    flex: 0.4,
    borderBottomWidth: 1,
    borderBottomColor: colors.light_Blue, // M√†u nh·∫°t h∆°n
    borderStyle: 'dashed',
    marginTop: 15,
  },
  guestInfoContainer: {
    borderTopWidth: 1,
    borderTopColor: colors.light_Blue,
    paddingTop: 15,
    marginBottom: 10,
    alignItems: 'center',
  },
  guestRow: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 5,
  },
  guestText: {
    color: '#333',
    fontSize: 15,
    marginLeft: 8,
  },
  summaryDivider: {
      height: 1,
      backgroundColor: colors.light_Blue,
      marginVertical: 15,
  },
  contactRow: {
      flexDirection: 'row',
      justifyContent: 'space-between',
      marginBottom: 8,
  },
  summaryLabel: {
      fontSize: 14,
      color: colors.grey_text,
  },
  summaryValue: {
      fontSize: 14,
      color: '#333',
      fontWeight: '500',
  },
  totalLabel: {
    textAlign: 'center',
    fontSize: 16,
    fontWeight: 'bold',
    color: '#0A2C4D',
    marginBottom: 5,
  },
  totalPriceText: {
    textAlign: 'center',
    fontSize: 24,
    fontWeight: 'bold',
    color: '#FF7A2F', // M√†u cam gi√° ti·ªÅn
  },
  bottomBar: {
    paddingVertical: 12,
    paddingHorizontal: 20,
    backgroundColor: colors.white,
    borderTopWidth: 1,
    borderTopColor: colors.light_Blue,
    elevation: 10,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: -2 },
    shadowOpacity: 0.1,
    shadowRadius: 5,
    paddingBottom: 20,
  },
  termsContainer: {
      marginBottom: 15,
  },
  termsTitle: {
      fontSize: 15,
      fontWeight: 'bold',
      color: '#0A2C4D',
      marginBottom: 5,
  },
  termsText: {
      fontSize: 13,
      color: colors.grey_text,
      lineHeight: 18,
  },
  linkText: {
      color: colors.blue_splash,
      textDecorationLine: 'underline',
  },
  // X√≥a c√°c style c≈© kh√¥ng c·∫ßn thi·∫øt
  // constainer, header, title, paymentCard, footer, txtPrice
});

export default Payment;